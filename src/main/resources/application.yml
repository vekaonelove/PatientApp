server:
  port: 8080
  servlet:
    context-path: /

spring:
  datasource:
    url: jdbc:mysql://${HOST:localhost}:${PORT:3306}/patient?createDatabaseIfNotExist=true
    username: ${USER:root}
    password: ${PASSWORD:1234}

  spring:
    kafka:
      bootstrap-servers: localhost:9092
      producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
      consumer:
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        group-id: app-group


  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: true
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${OAUTH2_CLIENT_ID:backend_client}
            client-secret: ${OAUTH2_CLIENT_SECRET:xkVPF7uByBIFKElC5bM8OXJCoaoUiRPG}
            authorization-grant-type: client_credentials
            scope: openid, profile, email
        provider:
          keycloak:
            token-uri: ${KEYCLOAK_URL}realms/${KEYCLOAK_REALM}/protocol/openid-connect/token
      resourceserver:
        jwt:
          jwk-set-uri: http://10.1.11.26:8282/realms/auth/protocol/openid-connect/certs
    devtools:
      restart:false

    auth:
      token:
        secret: ${AUTH_TOKEN_SECRET:mySuperSecretKeyDontShare}
        expiry-hours: ${AUTH_TOKEN_EXPIRY_HOURS:2}
        encrypt-secret: ${AUTH_TOKEN_ENCRYPT_SECRET:myEncryptionPassphrase}
  mvc:
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp

  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.xml
    contexts: dev,prod

logging:
  level:
    org.springframework: INFO
    com.example: DEBUG
  file:
    name: logs/patient-application.log

application:
  name: PatientApplication

